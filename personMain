package sec01;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PersonMain {

	public static Scanner sc = new Scanner(System.in);
	public static final int INPUT = 1, PRINT = 2, ANLYZE = 3, SEARCH = 4, UPDATE = 5, SORT = 6, DELETE = 7, EXIT = 8;

	public static void main(String[] args) {
		boolean run = true;
		int no = 0;
		ArrayList<Person> list = new ArrayList<>();
		DBConnection dbCon = new DBConnection();
		while (run) {
			System.out.println("====================================================");
			System.out.println("1.입력 2. 출력 3. 분석 4. 검색 5.수정 6. 정렬 7.삭제 8. 종료");
			System.out.println("====================================================");
			System.out.print(">>>>>");
			no = Integer.parseInt(sc.nextLine());
			switch (no) {
			//정보 입력
			case INPUT:
				Person person = inputDataPerson();
				int rValue = dbCon.insert(person);
				if (rValue == 1) {
					System.out.println("삽입 성공");
				} else {
					System.out.println("삽입 실패");
				}
				break;
			//정보 출력
			case PRINT:
				ArrayList<Person> list2 = dbCon.select();
				if (list2 == null) {
					System.out.println("select 실패");
				} else {
					printPerson(list2);
				}
				break;
			//정보 분석
			case ANLYZE:
				ArrayList<Person> list3 = dbCon.analyzeSelect();
				if (list3 == null) {
					System.out.println("분석실패");
				} else {
					printAnalyze(list3);
				}
				break;
			//정보(이름) 검색
			case SEARCH:
				String dataName = searchPerson();
				ArrayList<Person> list4 = dbCon.nameSearchSelect(dataName);
				if (list4.size() >= 1) {
					System.out.println(list4);
				} else {
					System.out.println("이름검색 오류");
				}
				break;
			//정보 수정
			case UPDATE:
				int updataReturnValue = 0;
				int id = inputid();
				Person per = dbCon.selectId(id);
				if (per == null) {
					System.out.println("수정오류 발생");
				} else {
					Person updataPerson = updataPerson(per);
					updataReturnValue = dbCon.update(updataPerson);
				}
				if (updataReturnValue == 1) {
					System.out.println("updata 성공");
				} else {
					System.out.println("updata 실패");
				}
				break;
			//정보 정렬
			case SORT:
				ArrayList<Person> list5 = dbCon.selectSort();
				if (list5 == null) {
					System.out.println("정렬실패");
				} else {
					printScoreSort(list5);
				}
				Collections.sort(list, Collections.reverseOrder());
				printPerson(list5);
				break;
			//정보 삭제
			case DELETE:
				int deleteid = inputid();
				int deleteReturnValue = dbCon.delete(deleteid);
				if (deleteReturnValue == 1) {
					System.out.println("삭제 성공");
				} else {
					System.out.println("삭제 실패");
				}
				break;
			case EXIT:
				run = false;
				break;
			}
		} // end of while
		System.out.println("The end");
	

	}// end of main

	private static void printScoreSort(ArrayList<Person> list5) {
		int data = 0;
		while (true) {
			try {
				data = (int) ((Math.random() * 100 - 0 + 1) + 0);
				Pattern pattern = Pattern.compile("^[0-9]{1,3}$");
				Matcher matcher = pattern.matcher(String.valueOf(data));
				if (matcher.find() && data <= 100) {
					break;
				} else {
					System.out.println("정보 수정에 실패했습니다. 재입력요청");
				}

			} catch (Exception e) {
				System.out.println("입력 오류가 발생했습니다.");
				data = 0;
				break;
			}
		}
		return ;
	}

	private static void printPerson(ArrayList<Person> list) {
		System.out.println("이름\t 나이\t 성별\t 키\t 몸무게\t 도시\t");
		for (Person data : list) {
			System.out.println(data);
		}
	}

	private static Person updataPerson(Person person) {
		int weight = inputdataSubject(person.getName(), "몸무게", person.getWeight());
		person.setWeight(weight);
		int height = inputdataSubject(person.getName(), "키" , person.getHeight());
		person.setHeight(height);
		System.out.println(person);
		return person;
		
	}
	private static int inputdataSubject(String name, String string, int weight ) {
		boolean run = true;
		int data = 0;
		
		while (run) {
			System.out.println(name + string + weight + ">>");
			try {
				data = Integer.parseInt(sc.nextLine());
				Pattern pattern = Pattern.compile("^[0-9]{1,3}$");
				Matcher matcher = pattern.matcher(String.valueOf(data));
				if (matcher.find() && data > 0 && data <= 200) {
					run = false;
				} else {
					System.out.println("입력값의 범위를 벗어났습니다.");
				}
			} catch (Exception e) {
				System.out.println(" 입력 오류 발생");
				data = 0;
			}
		}
		return data;
		
	}

	private static void printAnalyze(ArrayList<Person> list3) {
		for (Person data : list3) {
			System.out.println(data.getId() + "\t" + data.getName() + "\t"  +
					 + data.getHeight() + "\t" + data.getWeight() + "\t" );

		}

	}
	private static int inputid() {
		int id = 0;
		boolean run = true;
		System.out.println("ID입력(number)");
		while (run) {
			try {
				id = Integer.parseInt(sc.nextLine());
				if (id > 0 && id < Integer.MAX_VALUE) {
					run = false;
				}
			} catch (NumberFormatException e) {
				System.out.println("id 입력오류" + e.getMessage());
			}
		}

		return id;
	}

	private static String searchPerson() {
		String name = null;
		boolean flag = false;
		name = metchingNamePattern();
		return name;
	}

	private static String metchingNamePattern() {
		String name = null;
		while (true) {
			try {
				System.out.println("검색할 이름");
				name = sc.nextLine();
				Pattern pattern = Pattern.compile("^[가-힣]{2,3}$");
				Matcher matcher = pattern.matcher(name);
				if (!matcher.find()) {
					System.out.println("====================================");
					System.out.println("이름 입력에 오류가 발생했습니다 다시 입력하세요");
					System.out.println("====================================");
				} else {
					break;
				}

			} catch (Exception e) {
				System.out.println("=====================");
				System.out.println("입력에서 오류가 발생했습니다");
				System.out.println("=====================");
				break;
			}
		}
		return name;
	}

	private static Person inputDataPerson() {
		int id = inputid();
		String name = PersonMain.randomName();
		int age = inputAge();
		String gender = inputGender();
		int height = inputHeight();
		int weight = inputWeight();
		String city = inputCity();
		Person person = new Person(id, name, age, gender, height, weight, city);
		return person;
		
	}

	

	private static String randomName() {
		boolean run = true;
		String first = null;
		String second = null;
		String third = null;
		String name1 = null;
		while (run) {
			try {
				String[] firstName = new String[] { "김", "이", "박", "최", "정", "강", "조", "윤", "장", "임", "한", "오", "서",
						"신", "권", "황", "안", "송", "류", "전", "홍", "고", "문", "양", "손", "배", "조", "백", "허", "유", "남", "심",
						"노", "정", "하", "곽", "성", "차", "주", "우", "구", "신", "임", "나", "전", "민", "유", "진", "지", "엄", "채",
						"원", "천", "방", "공", "강", "현", "함", "변", "염", "양", "변", "여", "추", "노", "도", "소", "신", "석", "선",
						"설", "마", "길", "주", "연", "방", "위", "표", "명", "기", "반", "왕", "금", "옥", "육", "인", "맹", "제", "모",
						"장", "남", "탁", "국", "여", "진", "어", "은", "편", "구", "용" };
				String secondname[] = new String[] { "가", "강", "건", "경", "고", "관", "광", "구", "규", "근", "기", "길", "나",
						"남", "노", "누", "다", "단", "달", "담", "대", "덕", "도", "동", "두", "라", "래", "로", "루", "리", "마", "만",
						"명", "무", "문", "미", "민", "바", "박", "백", "범", "별", "병", "보", "빛", "사", "산", "상", "새", "서", "석",
						"선", "설", "섭", "성", "세", "소", "솔", "수", "숙", "순", "숭", "슬", "승", "시", "신", "아", "안", "애", "엄",
						"여", "연", "영", "예", "오", "옥", "완", "요", "용", "우", "원", "월", "위", "유", "윤", "율", "으", "은", "의",
						"이", "익", "인", "일", "잎", "자", "잔", "장", "재", "전", "정", "제", "조", "종", "주", "준", "중", "지", "진",
						"찬", "창", "채", "천", "철", "초", "춘", "충", "치", "탐", "태", "택", "판", "하", "한", "해", "혁", "현", "형",
						"혜", "호", "홍", "화", "환", "회", "효", "훈", "휘", "희", "운", "모", "배", "부", "림", "봉", "혼", "황", "량",
						"린", "을", "비", "솜", "공", "면", "탁", "온", "디", "항", "후", "려", "균", "묵", "송", "욱", "휴", "언", "령",
						"섬", "들", "견", "추", "걸", "삼", "열", "웅", "분", "변", "양", "출", "타", "흥", "겸", "곤", "번", "식", "란",
						"더", "손", "술", "훔", "반", "빈", "실", "직", "흠", "흔", "악", "람", "뜸", "권", "복", "심", "헌", "엽", "학",
						"개", "롱", "평", "늘", "늬", "랑", "얀", "향", "울", "련" };
				first = firstName[(int) (Math.random() * (firstName.length - 1 - 0 + 1) + 0)];
				second = secondname[(int) (Math.random() * (secondname.length - 1 - 0 + 1) + 0)];
				third = secondname[(int) (Math.random() * (secondname.length - 1 - 0 + 1) + 0)];
				name1 = first + second + third;
				Pattern pattern = Pattern.compile("^[가-힣]{2,4}$");
				Matcher matcher = pattern.matcher(name1);
				if (!matcher.find()) {
					System.out.println("이름입력오류발생 다시재입력요청합니다.");
				} else {
					run = false;
				}
			} catch (Exception e) {
				System.out.println("입력에 오류가 발생했습니다.");
				name1 = null;
				run = false;
			}
		} // end of while

		return name1;

	}

	private static String inputCity() {
		String name = null;
		while (true) {
			try {
				System.out.print("도시입력(2):");
				name = sc.nextLine();
				Pattern pattern = Pattern.compile("^[가-힣]{2}$");
				Matcher matcher = pattern.matcher(name);
				if (!matcher.find()) {
					System.out.println("도시 입력에 오류가 발생했습니다 다시 입력하세요");
				} else {
					break;
				}

			} catch (Exception e) {
				System.out.println("입력에서 오류가 발생했습니다");
				break;
			}
		}
		
		return name;
	}

	private static int inputWeight() {
		int weight = 0;
		while(true) {
			try {
				weight = (int) ((Math.random() * 201 - 0 + 1) + 0);
				Pattern pattern = Pattern.compile("^[0-9]{1,3}$");
				Matcher matcher = pattern.matcher(String.valueOf(weight));
				if(matcher.find() && weight <= 200 ) {
					break;
					
				}else {
					System.out.println("무게를 잘못입력했습니다. 재입력요망");
				}
			
			}catch(Exception e){
				System.out.println("입력 오류가 발생했어요");
				weight = 0;
				break;
			}
			
		}
		
		return weight;
	}

	private static int inputHeight() {
		int height = 0;
		while(true) {
			try {
				height = (int) ((Math.random() * 301 - 0 + 1) + 0);
				Pattern pattern = Pattern.compile("^[0-9]{1,3}$");
				Matcher matcher = pattern.matcher(String.valueOf(height));
				if(matcher.find() && height <= 300 ) {
					break;
					
				}else {
					System.out.println("키를 잘못입력했습니다. 재입력요망");
				}
			
			}catch(Exception e){
				System.out.println("입력 오류가 발생했어요");
				height = 0;
				break;
			}
			
		}
		return height;
	}

	private static String inputGender() {
		String gender = null;
		while (true) {
			try {
				System.out.print("성별입력 (남자)(여자):");
				gender = sc.nextLine();
				Pattern pattern = Pattern.compile("^[가-힣]{2}$");
				Matcher matcher = pattern.matcher(gender);
				if (!matcher.find()) {
					System.out.println("성별 입력에 오류가 발생했습니다 다시 입력하세요");
				} else {
					break;
				}

			} catch (Exception e) {
				System.out.println("입력에서 오류가 발생했습니다");
				break;
			}
		}
		
		return gender;
	}

	private static int inputAge() {
		int age = 0;
		while (true) {
			try {
				age = (int) ((Math.random() * 101) + 1);
				Pattern pattern = Pattern.compile("^[0-9]{1,3}$");
				Matcher matcher = pattern.matcher(String.valueOf(age));
				if (matcher.find() && age <= 100) {
					break;
				} else {
					System.out.println("나이를 잘못 입력했어요 다시 입력해주세요");
				}

			} catch (Exception e) {
				System.out.println("입력 오류 발생");
				age = 0;
				break;
			}

		}

		return age;
	}

}
